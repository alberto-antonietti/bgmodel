%% Date Created: 04.04.18 by M. Mohagheghi

% This script visualizes the results generated by main.m which contains the
% time when disinhibition happened and also the population average firing
% rate of all nuclei.
function [] = main_vis()
    
    base_ind = 2;
    adding_ind = [3,4];
    
    dir_name = '/home/mohaghegh-data/temp-storage/18-03-28-separatesims-sensoryinSTNGPA-rampinSTR/';
    fl_name = [dir_name,'all_proc_data.mat'];
    if exist('procdata','var') ~= 1
        load(fl_name);
    end

    strstn = procdata{1,1};
    strstn.stim_param(:,[1,4]) = [];
    strstn.stim_param_ISI(:,[1,4]) = [];
    str = procdata{1,5};
    strstngpa = struct_conc(procdata,base_ind,adding_ind);
    
    % All stimuli parameters
    
    str_f = unique(strstngpa.stim_param(:,2));
    stn_f = unique(strstngpa.stim_param(:,3));
    gpa_f = unique(strstngpa.stim_param(:,1));
    relsg = unique(strstngpa.stim_param(:,4));
    relss = unique(strstngpa.stim_param(:,5));
    
    % Choosing which nucleus to process
    
    ncs_sel = 'SN';
    ncs = {'FS','GA','GF','GI','M1','M2','SN','ST'};
%     ncs = str.nuclei.nc_names;
    nc_ind = find(strcmpi(ncs,ncs_sel));
    
    % Taking all relevant data to the nucleus
    
%     str = NOI_data(str,nc_ind);
%     strstn = NOI_data(strstn,nc_ind);
%     strstngpa = NOI_data(strstngpa,nc_ind);
    
    % Putting all stim parameters together
    
    all_stim_par = combvec(str_f',stn_f',gpa_f',relss',relsg');
    
    % Measuring delays
    [delay_gpastn,delay_stn,diffdelay_stnvsgpa,...
     off_str,off_stn] = trbytr_delay_measure(str,strstn,strstngpa);
 
    % Distribution of off times in SNr for each individual rate
    
    dist_offtime_each_w(str,strstn,strstngpa,dir_name)
    
%     figure;
%     edges = -100:10;
%     histogram(str.offtime,edges,'Normalization','probability')
%     hold on
%     histogram(strstn.offtime,edges,'Normalization','probability')
%     histogram(strstngpa.offtime,edges,'Normalization','probability')
    
    
    
end

function data_struct_out = struct_conc(data,base_ind,adding_ind)
    for a_ind = 1:length(adding_ind)
        disp(['adding ',num2str(adding_ind(a_ind)),' to ',num2str(base_ind)])
        data{1,base_ind}.stim_param = [data{1,base_ind}.stim_param;...
                                            data{1,adding_ind(a_ind)}.stim_param];
        data{1,base_ind}.nuclei_trials = [data{1,base_ind}.nuclei_trials;...
                                            data{1,adding_ind(a_ind)}.nuclei_trials];
        data{1,base_ind}.average_fr = [data{1,base_ind}.average_fr;...
                                            data{1,adding_ind(a_ind)}.average_fr];
        data{1,base_ind}.average_fr_no_overlap = [data{1,base_ind}.average_fr_no_overlap;...
                                            data{1,adding_ind(a_ind)}.average_fr_no_overlap];
        data{1,base_ind}.offtime = [data{1,base_ind}.offtime;...
                                            data{1,adding_ind(a_ind)}.offtime];
        data{1,base_ind}.stim_param_ISI = [data{1,base_ind}.stim_param_ISI;...
                                            data{1,adding_ind(a_ind)}.stim_param_ISI];
        data{1,base_ind}.nuclei_trials_ISI = [data{1,base_ind}.nuclei_trials_ISI;...
                                            data{1,adding_ind(a_ind)}.nuclei_trials_ISI];
        data{1,base_ind}.num_units = [data{1,base_ind}.num_units;...
                                            data{1,adding_ind(a_ind)}.num_units];
    end
    data_struct_out = data{1,base_ind};
end

function [DAT_red] = NOI_data(DAT,nc_ind)
    IND = DAT.nuclei_trials_ISI(:,1) == nc_ind;
    DAT.nuclei_trials_ISI = DAT.nuclei_trials_ISI(IND,:);
    DAT.stim_param_ISI = DAT.stim_param_ISI(IND,:);
    DAT.offtime = DAT.offtime(IND,:);
    DAT_red = DAT;
end

function [gpa_str_delay,stn_str_delay,gpa_stn_delay,...
          offtime_str,offtime_stn] = trbytr_delay_measure(STR,STN,GPA)
    offtime_str = zeros(size(GPA.offtime));
    offtime_stn = zeros(size(GPA.offtime));
    for ind = 1:size(GPA.offtime,1)
        str_ind = STR.stim_param_ISI == GPA.stim_param_ISI(ind,2) & ...
                  STR.nuclei_trials_ISI(:,2) == GPA.nuclei_trials_ISI(ind,2) & ...
                  STR.nuclei_trials_ISI(:,3) == GPA.nuclei_trials_ISI(ind,3);
                   
        stn_ind = STN.stim_param_ISI(:,1) == GPA.stim_param_ISI(ind,2) & ...
                  STN.stim_param_ISI(:,2) == GPA.stim_param_ISI(ind,3) & ...
                  STN.stim_param_ISI(:,3) == GPA.stim_param_ISI(ind,5) & ...
                  STN.nuclei_trials_ISI(:,2) == GPA.nuclei_trials_ISI(ind,2) & ...
                  STN.nuclei_trials_ISI(:,3) == GPA.nuclei_trials_ISI(ind,3);
        
        offtime_str(ind) = STR.offtime(str_ind);
        offtime_stn(ind) = STN.offtime(stn_ind);

    end
    gpa_str_delay = GPA.offtime - offtime_str;
    stn_str_delay = offtime_stn - offtime_str;
    gpa_stn_delay = GPA.offtime - offtime_stn;
end

function [] = dist_offtime_each_w(str_d,stn_d,gpa_d,dir_path)
    edges = -100:10;
    Ws = unique(str_d.nuclei_trials_ISI(:,3));
    figdir = [dir_path,'DistributionOfftimes/'];
    if exist(figdir,'dir') ~= 7
        mkdir(figdir)
    end
    for w_ind = 1:length(Ws)
        figure;
        histogram(str_d.offtime(str_d.nuclei_trials_ISI(:,3) == Ws(w_ind)),...
                  edges,'Normalization','probability')
        hold on
        histogram(stn_d.offtime(stn_d.nuclei_trials_ISI(:,3) == Ws(w_ind)),...
                  edges,'Normalization','probability')
        histogram(gpa_d.offtime(gpa_d.nuclei_trials_ISI(:,3) == Ws(w_ind)),...
                  edges,'Normalization','probability')
              
        legend({'NoSen','STN-Sen','STNGPA-Sen'})
        title(['GPe_{Arky}\rightarrow STR = ',num2str(Ws(w_ind))])
        xlabel('Off time relative to STR stimulation offset')
        fig_print(gcf,[figdir,'W',num2str(Ws(w_ind)*100,'%i')])
    end
end